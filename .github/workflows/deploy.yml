name: Deploy FastAPI Application

on:
  push:
    branches: [main]

# Add concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest || exit 1

  deploy:
    timeout-minutes: 15
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Update and setup
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg nginx
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # Create SSL certificate directory
            sudo mkdir -p /etc/nginx/ssl

            # Generate self-signed certificate
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/nginx/ssl/nginx.key \
              -out /etc/nginx/ssl/nginx.crt \
              -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"

            # Configure Docker permissions
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo groupadd -f docker
            sudo usermod -aG docker ubuntu
            sudo chmod 666 /var/run/docker.sock

            # Setup app directory with correct permissions
            if [ ! -d "/app" ]; then
              sudo git clone https://github.com/KyleRobins/stage-two.git /app
              sudo chown -R ubuntu:ubuntu /app
            else
              cd /app
              sudo git pull origin main
            fi

            # Build and run the FastAPI application with the exact required command
            cd /app
            sudo docker stop fastapi-app || true
            sudo docker rm fastapi-app || true
            sudo docker build -t fastapi-app . && sudo docker run -d -p 8000:8000 fastapi-app

            # Configure Nginx with HTTPS
            sudo bash -c 'cat > /etc/nginx/sites-available/fastapi <<EOL
            server {
                listen 80;
                server_name _;
                return 301 https://$host$request_uri;
            }

            server {
                listen 443 ssl;
                server_name _;

                ssl_certificate /etc/nginx/ssl/nginx.crt;
                ssl_certificate_key /etc/nginx/ssl/nginx.key;
                
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers HIGH:!aNULL:!MD5;

                location / {
                    proxy_pass http://localhost:8000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL'

            sudo ln -sf /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl restart nginx

            # Wait for container to be ready
            echo "Waiting for application to be ready..."
            for i in {1..30}; do
              if curl -sk https://localhost/health | grep -q "healthy"; then
                echo "Application is ready!"
                exit 0
              fi
              echo "Waiting... ($i/30)"
              sleep 10
            done
            echo "Application failed to become ready in time"
            exit 1
